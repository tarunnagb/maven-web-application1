name: Build, Test, SonarQube, and Deploy to ECR

on:
  push:
    branches:
      - dev
      - qa
      - prod

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Set up Maven Cache
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Set Environment-Specific Variables
        id: vars
        run: |
          BRANCH="${GITHUB_REF##*/}"

          if [[ "$BRANCH" == "dev" ]]; then
            echo "MVN_CMD=clean package dev"             >> $GITHUB_OUTPUT
            echo "SONAR_PROJECT_KEY=sonar-project-dev"   >> $GITHUB_OUTPUT
            echo "ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY_dev }}" >> $GITHUB_ENV
            echo "AWS_REGION=us-east-1"                  >> $GITHUB_ENV
          elif [[ "$BRANCH" == "qa" ]]; then
            echo "MVN_CMD=clean package qa"              >> $GITHUB_OUTPUT
            echo "SONAR_PROJECT_KEY=sonar-project-qa"    >> $GITHUB_OUTPUT
            echo "ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY_qa }}"  >> $GITHUB_ENV
            echo "AWS_REGION=eu-central-1"               >> $GITHUB_ENV
          elif [[ "$BRANCH" == "prod" ]]; then
            echo "MVN_CMD=clean package"                 >> $GITHUB_OUTPUT
            echo "SONAR_PROJECT_KEY=sonar-project-prod"  >> $GITHUB_OUTPUT
            echo "ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY_PROD }}" >> $GITHUB_ENV
            echo "AWS_REGION=eu-central-1"               >> $GITHUB_ENV
          else
            echo "Unsupported branch: $BRANCH"
            exit 1
          fi

      - name: Build with Maven
        run: mvn ${{ steps.vars.outputs.MVN_CMD }} -DskipTests

      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=${{ steps.vars.outputs.SONAR_PROJECT_KEY }} \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Build, Tag, and Push Docker Image to ECR
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          IMAGE_TAG:    ${{ github.sha }}
          ECR_REPO:     ${{ env.ECR_REPOSITORY }}
        run: |
          IMAGE_NAME=$ECR_REGISTRY/$ECR_REPO

          echo "Building Docker image..."
          docker build -t $IMAGE_NAME:$IMAGE_TAG .

          echo "Tagging image with 'latest'..."
          docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest

          echo "Pushing Docker images to ECR..."
          docker push $IMAGE_NAME:$IMAGE_TAG
          docker push $IMAGE_NAME:latest
